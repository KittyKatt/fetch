#!/usr/bin/env bash
# variables: script global
# script version
FETCH_VERSION="0.8.1"
# directory where fetch library/ascii files live
# (configurable with -l/--lib)
FETCH_DATA_DIR="/usr/share/fetch"
# default directory and filename where fetch config lives
# (config locdation configurable with --config/-c)
FETCH_DATA_USER_DIR="${XDG_CONFIG_HOME:-${HOME}}/.config/fetch"
FETCH_CONFIG_FILENAME="config"
LC_ALL=C
LANG=C

# https://github.com/KittyKatt/screenFetch/issues/549
if [[ ${OSTYPE} =~ linux || ${OSTYPE} == gnu ]]; then
    # issue seems to affect Ubuntu; add LSB directories if it appears on other distros too
    export GIO_EXTRA_MODULES="/usr/lib/x86_64-linux-gnu/gio/modules:/usr/lib/i686-linux-gnu/gio/modules:${GIO_EXTRA_MODULES}"
fi

# Set shopt extglob for filename-like globbing in case statements. Check if exttglob was set before and store that as a variable.
shopt -q extglob
extglob_set=$?
((extglob_set)) && shopt -s extglob

# functions: script output
verboseOut() {
    # shellcheck disable=SC2154
    case ${config_global[verbose]} in
        on) printf '\033[1;31m:: \033[0m%s\n' "${1}" ;;
        *) ;;
    esac
}
errorOut() {
    printf '\033[1;37m[[ \033[1;31m! \033[1;37m]] \033[0m%b\n' "${1}"
}

# functions: text
strip_sequences() {
    strip="${1//$'\e['3[0-9]m/}"
    strip="${strip//$'\e['[0-9]m/}"
    strip="${strip//\\e\[[0-9]m/}"
    strip="${strip//$'\e['38\;5\;[0-9]m/}"
    strip="${strip//$'\e['38\;5\;[0-9][0-9]m/}"
    strip="${strip//$'\e['38\;5\;[0-9][0-9][0-9]m/}"

    printf '%s\n' "${strip}"
}
trim() {
    set -f
    # shellcheck disable=SC2086,SC2048
    set -- $*
    printf '%s\n' "${*//[[:space:]]/}"
    set +f
}

# functions: color
# variables: color
reset='\e[0m'
colorize() {
    case ${1} in
        *bold)
            local color="${1//\,bold/}"
            printf $'\033[1m\033[38;5;%bm' "${color}"
            ;;
        *) printf $'\033[0m\033[38;5;%bm' "${1}" ;;
    esac
}
getColor() {
    local tmp_color=""
    if [ -n "${1}" ]; then
        if [ "${BASH_VERSINFO[0]}" -ge '4' ]; then
            if [[ ${BASH_VERSINFO[0]} -eq '4' && ${BASH_VERSINFO[1]} -gt '1' ]] || [ "${BASH_VERSINFO[0]}" -gt '4' ]; then
                tmp_color=${1,,}
            else
                tmp_color="$(tr '[:upper:]' '[:lower:]' <<< "${1}")"
            fi
        else
            tmp_color="$(tr '[:upper:]' '[:lower:]' <<< "${1}")"
        fi

        case "${tmp_color}" in
            'black')                        color_ret='\033[0m\033[30m' ;;
            'red')                          color_ret='\033[0m\033[31m' ;;
            'green')                        color_ret='\033[0m\033[32m' ;;
            'brown')                        color_ret='\033[0m\033[33m' ;;
            'blue')                         color_ret='\033[0m\033[34m' ;;
            'purple')                       color_ret='\033[0m\033[35m' ;;
            'cyan')                         color_ret='\033[0m\033[36m' ;;
            'yellow')                       color_ret='\033[0m\033[1;33m' ;;
            'white')                        color_ret='\033[0m\033[1;37m' ;;
            'dark grey')                    color_ret='\033[0m\033[1;30m' ;;
            'light red')                    color_ret='\033[0m\033[1;31m' ;;
            'light green')                  color_ret='\033[0m\033[1;32m' ;;
            'light blue')                   color_ret='\033[0m\033[1;34m' ;;
            'light purple')                 color_ret='\033[0m\033[1;35m' ;;
            'light cyan')                   color_ret='\033[0m\033[1;36m' ;;
            'light grey' | 'bold white')    color_ret='\033[0m\033[37m' ;;
            ?([1])?([0-9])[0-9]?(,bold))    color_ret=$(colorize "${tmp_color}") ;;
            ?([2])?([0-4])[0-9]?(,bold))    color_ret=$(colorize "${tmp_color}") ;;
            ?([2])?([5])[0-6]?(,bold))      color_ret=$(colorize "${tmp_color}") ;;
            'rand')
                _color=$((RANDOM % 255))
                color_ret="$(colorize ${_color})"
                ;;
            *)
                errorOut "That color will not work"
                exit 1
                ;;
        esac

        [ -n "${color_ret}" ] && printf '%b' "${color_ret}"
    fi
}

###############################
# functions: output
print_info() {
    local _info="my_${1}"
    local _infodisplay="my_${1}"
    until [ -n "${!_info}" ]; do
        ((${#_display} < 1)) && break
        _display=("${_display[@]:1}")
        _info="my_${1}}"
    done

    if [ -n "${!_info}" ]; then
        _info_subtitle="config_${1}[subtitle]"
        if [ -n "${!_info_subtitle}" ]; then
            # shellcheck disable=SC2154
            printf '%b\n' "${!_info_subtitle}${config_text[info_separator]} ${!_info}"
        else
            printf '%b\n' "${!_info}"
        fi
    else
        :
    fi

    _display=("${_display[@]:1}")
}
print_ascii() {
    local logo="${1}"
    # shellcheck disable=SC2154
    gap=${config_ascii[gap]}
    # Calculate: (max detected logo width - length of current line)
    _tmp="${logo//\$\{??\}/}"
    _tmp=${_tmp//\\\\/\\}
    _tmp=${_tmp//█/ }
    # shellcheck disable=SC2154
    if ((${#_tmp} < ascii_len)); then
        logo_padding=$((ascii_len - ${#_tmp}))
    else
        logo_padding=0
    fi

    # Random coloring support
    if [ "${config_ascii['colors']}" == "random" ]; then
        declare _randc
        local n=1
        while [[ ${logo} =~ \$\{[c][1-6]\} ]]; do
            _randc="$(getColor 'rand')"
            logo="${logo//\$\{c${n}\}/${_randc}}"
            ((n++))
        done
    fi

    # Expand color variables
    logo="${logo//\$\{c1\}/$c1}"
    logo="${logo//\$\{c2\}/$c2}"
    logo="${logo//\$\{c3\}/$c3}"
    logo="${logo//\$\{c4\}/$c4}"
    logo="${logo//\$\{c5\}/$c5}"
    logo="${logo//\$\{c6\}/$c6}"

    # Let's output!
    if [ "${config_text[display]}" == "on" ]; then
        # Format line with gap after ASCII for info display
        ((text_padding = logo_padding + gap))
        logo="$(printf "%b \e[%sC" "${logo}" "${text_padding}")"

        # Display ASCII art and detected info
        # shellcheck disable=SC2154
        if [ "${i}" -lt "${startline}" ]; then
            printf '%b\n' "${logo}${reset}"
        elif [ "${i}" -ge "${startline}" ]; then
            if ((${#_display} > 0)); then
                _infodisplay="$(print_info "${_display[0]}")"
                printf '%b\n' "${logo}${reset}${_infodisplay}"
                _display=("${_display[@]:1}")
            else
                printf '%b\n' "${logo}${reset}"
            fi
        fi

        # Cleanup
        # shellcheck disable=SC2031
        unset _tmp
        unset text_padding
    else
        printf '%b\n' "${logo}${reset}"
    fi

    # Cleanup
    unset n
}

#############################
# function: Usage
usage() {
    printf "Help!\n"
}

##############################
# function: Version
versioninfo() {
    printf 'fetch %s\n' "${FETCH_VERSION}"
}

###############################
# function: Cache uname
# cache uname output to not spawn more than one
# shellcheck disable=SC2034
cache_uname() {
    # Cache the output of uname so we don't
    # have to spawn it multiple times.
    IFS=" " read -ra uname <<< "$(uname -srm)"

    kernel_name="${uname[0]}"
    kernel_version="${uname[1]}"
    kernel_machine="${uname[2]}"

    if [[ "$kernel_name" == "Darwin" ]]; then
        # macOS can report incorrect versions unless this is 0.
        # https://github.com/dylanaraps/neofetch/issues/1607
        export SYSTEM_VERSION_COMPAT=0

        IFS=$'\n' read -d "" -ra sw_vers <<< "$(awk -F'<|>' '/key|string/ {print $3}' \
                            "/System/Library/CoreServices/SystemVersion.plist")"
        for ((i=0;i<${#sw_vers[@]};i+=2)) {
            case ${sw_vers[i]} in
                ProductName)          darwin_name=${sw_vers[i+1]} ;;
                ProductVersion)       osx_version=${sw_vers[i+1]} ;;
                ProductBuildVersion)  osx_build=${sw_vers[i+1]}   ;;
            esac
        }
    fi
}

main() {
    cache_uname

    # shellcheck disable=SC1090
    {
        . "${FETCH_DATA_DIR}/lib/detection/os.sh"
        . "${FETCH_DATA_DIR}/lib/detection/distro.sh"
    }

    detect_os
    detect_distro

    for g in ${config_global[info]}; do
        # shellcheck disable=SC1090
        . "${FETCH_DATA_DIR}/lib/detection/${g}.sh"
        "detect_${g}"
    done

    # shellcheck disable=SC2154
    read -r -a _display <<< "${config_global[info]}"

    if [ "${config_ascii[display]}" == "on" ]; then
        i=0
        # Get logo max width
        # shellcheck disable=SC2154
        while IFS=$'\n' read -r line; do
            line=${line//\\\\/\\}
            line=${line//█/ }
            ((++lines, ${#line} > ascii_len)) && ascii_len="${#line}"
        done <<< "${asciiLogo//\$\{??\}/}"
        # Loop over logo and output
        # shellcheck disable=SC2154
        while IFS=$'\n' read -r line; do
            print_ascii "${line}"
            ((i++))
        done <<< "${asciiLogo}"
        unset i
    else
        while ((${#_display} > 0)); do
            print_info "${_display[0]}"
        done
    fi
}

# Catch configuration flag
[[ $* != *--config* ]] && FETCH_CONFIG="${FETCH_DATA_USER_DIR}/${FETCH_CONFIG_FILENAME}"

# Execution flag detection
while [[ $* =~ (--help|-h|--version|-V|--config|-c|--lib|-l) ]]; do
    case ${1} in
        --help | -h)
            usage
            exit 0
            ;;
        --version | -V)
            versioninfo
            exit 0
            ;;
        --config | -c)
            FETCH_CONFIG="${2}"
            shift 2
            ;;
        --lib | -l)
            FETCH_DATA_DIR="${2}"
            shift 2
            ;;
        *) break ;;
    esac
done

if [ -f "${FETCH_DATA_DIR:-/usr/share/fetch}/lib/config.sh" ]; then
    # shellcheck disable=SC1090
    . "${FETCH_DATA_DIR:-/usr/share/fetch}/lib/config.sh"
else
    errorOut "Error: Could not find config.sh library in ${FETCH_DATA_DIR:-/usr/share/fetch}/lib/"
    exit 1
fi

fetchConfig "${FETCH_CONFIG}"

# shellcheck disable=SC2034
while getopts ":hvVNRTLD:A:" flags; do
    # shellcheck disable=SC2154
    case ${flags} in
        v) config_global[verbose]="on" ;;
        D) my_distro="${OPTARG}" ;;
        A) ascii_distro="${OPTARG}" ;;
        N) config_text[color]="off" ;;
        T) config_ascii[display]="off" ;;
        L) config_text[display]="off" ;;
        R) config_ascii['colors']="random" ;;
        :)
            errorOut "Error: You're missing an argument somewhere. Exiting."
            exit 1
            ;;
        ?)
            errorOut "Error: Invalid flag somewhere. Exiting."
            exit 1
            ;;
        *)
            errorOut "Error"
            exit 1
            ;;
    esac
done

main

((extglob_set)) && shopt -u extglob
